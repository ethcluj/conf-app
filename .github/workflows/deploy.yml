name: Deploy to VPS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies and build UI
      run: |
        cd ui
        yarn install --frozen-lockfile
        yarn build
        
    - name: Install dependencies and build Backend
      run: |
        cd backend
        npm ci
        npm run build
        
    - name: Debug SSH connection
      run: |
        echo "Checking SSH connection..."
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        echo "Extracting public key..."
        ssh-keygen -y -f ~/.ssh/id_ed25519 || echo "Failed to extract public key"
        echo "VPS_HOST: ${{ secrets.VPS_HOST }}"
        echo "VPS_USERNAME: ${{ secrets.VPS_USERNAME }}"
        echo "Testing SSH connection with verbose output..."
        ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "echo Connection successful" || echo "SSH connection failed"
        
    - name: Deploy to VPS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
        script: |
          cd /opt/conf-app
          
          # Pull latest code
          git pull
          
          # Create .env file
          cat > .env << EOF
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          GOOGLE_SHEET_ID=${{ secrets.GOOGLE_SHEET_ID }}
          GOOGLE_SHEET_NAME=${{ secrets.GOOGLE_SHEET_NAME }}
          GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
          GOOGLE_SPEAKERS_SHEET_NAME=${{ secrets.GOOGLE_SPEAKERS_SHEET_NAME }}
          DATA_SOURCE=google-sheet
          EOF
          
          # Deploy with Docker Compose
          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml build --no-cache
          docker-compose -f docker-compose.prod.yml up -d
          
          # Test deployment
          echo "Testing backend API endpoints..."
          curl -s http://localhost/api/value
          curl -s -I http://localhost/ | grep "HTTP"