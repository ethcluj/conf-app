name: Deploy to VPS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Node.js for UI
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'yarn'
        cache-dependency-path: ui/yarn.lock
        
    - name: Install dependencies and build UI
      run: |
        cd ui
        yarn install --frozen-lockfile
        yarn build
    
    - name: Set up Node.js for Backend
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies and build Backend
      run: |
        cd backend
        npm ci
        npm run build
        
    - name: Deploy to VPS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
        script: |
          # Install NVM if not already installed
          if [ ! -d "$HOME/.nvm" ]; then
            echo "Installing NVM..."
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
          fi
          
          # Load NVM
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          
          # Verify NVM is working
          echo "NVM version: $(nvm --version || echo 'NVM not found')"
          
          # Install Node.js v22.16.0
          echo "Installing Node.js v22.16.0..."
          nvm install 22.16.0
          nvm use 22.16.0
          
          # Verify Node.js version
          echo "Node.js version: $(node -v)"
          echo "NPM version: $(npm -v)"
          
          cd /opt/conf-app
          
          # Pull latest code
          git pull
          
          # Install global dependencies
          echo "Installing global dependencies..."
          npm install -g yarn pm2
          
          # Install and build UI
          echo "Building UI..."
          cd ui
          yarn install --frozen-lockfile
          yarn build
          
          # Install and build backend
          echo "Building backend..."
          cd ../backend
          npm ci
          npm run build
          
          # Set up environment variables if not already done
          if [ ! -f .env ]; then
            echo "Creating .env file"
            cp .env.example .env
            # Update with email configuration from GitHub secrets
            echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> .env
            echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> .env
            echo "EMAIL_FROM=\"ETHCluj Conference <noreply@ethcluj.org>\"" >> .env
            # Add PostgreSQL database credentials
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER || 'postgres' }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD || secrets.DB_PASSWORD || 'postgres' }}" >> .env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB || 'ethcluj_conf' }}" >> .env
            echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST || 'db' }}" >> .env
            echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT || '5432' }}" >> .env
          else
            # Update existing .env file with email configuration
            grep -q "EMAIL_USER" .env || echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> .env
            grep -q "EMAIL_PASSWORD" .env || echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> .env
            grep -q "EMAIL_FROM" .env || echo "EMAIL_FROM=\"ETHCluj Conference <noreply@ethcluj.org>\"" >> .env
            # Update PostgreSQL database credentials
            grep -q "POSTGRES_USER" .env || echo "POSTGRES_USER=${{ secrets.POSTGRES_USER || 'postgres' }}" >> .env
            grep -q "POSTGRES_PASSWORD" .env || echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD || secrets.DB_PASSWORD || 'postgres' }}" >> .env
            grep -q "POSTGRES_DB" .env || echo "POSTGRES_DB=${{ secrets.POSTGRES_DB || 'ethcluj_conf' }}" >> .env
            grep -q "POSTGRES_HOST" .env || echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST || 'db' }}" >> .env
            grep -q "POSTGRES_PORT" .env || echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT || '5432' }}" >> .env
          fi
          
          # Stop existing containers, rebuild with no cache, and restart
          echo "Stopping existing containers..."
          docker-compose -f docker-compose.prod.yml down
          echo "Rebuilding containers with no cache..."
          docker-compose -f docker-compose.prod.yml build --no-cache
          echo "Starting containers in detached mode..."
          docker-compose -f docker-compose.prod.yml up -d
          echo "Verifying containers are running..."
          docker-compose -f docker-compose.prod.yml ps
          
          # Show logs to help with debugging
          echo "Showing recent logs from containers..."
          docker-compose -f docker-compose.prod.yml logs --tail=50
