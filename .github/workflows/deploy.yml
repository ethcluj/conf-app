name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy:
        description: Deploy Application
        required: true

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Node.js for UI
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'yarn'
        cache-dependency-path: ui/yarn.lock
        
    - name: Install dependencies and build UI
      run: |
        cd ui
        yarn install --frozen-lockfile
        yarn build
    
    - name: Set up Node.js for Backend
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies and build Backend
      run: |
        cd backend
        npm ci
        npm run build
        
    - name: Deploy to VPS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
        script: |
          # Install NVM if not already installed
          if [ ! -d "$HOME/.nvm" ]; then
            echo "Installing NVM..."
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
          fi
          
          # Load NVM
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          
          # Verify NVM is working
          echo "NVM version: $(nvm --version || echo 'NVM not found')"
          
          # Install Node.js v22.16.0
          echo "Installing Node.js v22.16.0..."
          nvm install 22.16.0
          nvm use 22.16.0
          
          # Verify Node.js version
          echo "Node.js version: $(node -v)"
          echo "NPM version: $(npm -v)"
          
          cd /opt/conf-app
          
          # Pull latest code
          git pull
          
          # Create deploy directory structure if it doesn't exist
          mkdir -p deploy/nginx
          
          # Ensure scripts are executable
          chmod +x deploy/scripts/*.sh
          
          # Create or update .env file
          if [ ! -f .env ]; then
            echo "Creating .env file"
            cp .env.example .env
          fi
          
          # Update environment variables
          echo "Updating environment variables..."
          sed -i "s/^EMAIL_USER=.*/EMAIL_USER=${{ secrets.EMAIL_USER }}/g" .env
          sed -i "s/^EMAIL_PASSWORD=.*/EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}/g" .env
          sed -i "s/^EMAIL_FROM=.*/EMAIL_FROM=\"ETHCluj Conference <noreply@ethcluj.org>\"/g" .env
          sed -i "s/^POSTGRES_USER=.*/POSTGRES_USER=${{ secrets.POSTGRES_USER || 'postgres' }}/g" .env
          sed -i "s/^POSTGRES_PASSWORD=.*/POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD || 'postgres' }}/g" .env
          sed -i "s/^POSTGRES_DB=.*/POSTGRES_DB=${{ secrets.POSTGRES_DB || 'value_db' }}/g" .env
          sed -i "s/^POSTGRES_HOST=.*/POSTGRES_HOST=${{ secrets.POSTGRES_HOST || 'db' }}/g" .env
          sed -i "s/^POSTGRES_PORT=.*/POSTGRES_PORT=${{ secrets.POSTGRES_PORT || '5432' }}/g" .env
          sed -i "s/^GOOGLE_SHEET_ID=.*/GOOGLE_SHEET_ID=${{ secrets.GOOGLE_SHEET_ID }}/g" .env
          sed -i "s/^GOOGLE_SHEET_NAME=.*/GOOGLE_SHEET_NAME=${{ secrets.GOOGLE_SHEET_NAME }}/g" .env
          sed -i "s/^GOOGLE_API_KEY=.*/GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}/g" .env
          sed -i "s/^GOOGLE_SPEAKERS_SHEET_NAME=.*/GOOGLE_SPEAKERS_SHEET_NAME=${{ secrets.GOOGLE_SPEAKERS_SHEET_NAME }}/g" .env
          sed -i "s/^GOOGLE_STAGE_MANAGERS_SHEET_NAME=.*/GOOGLE_STAGE_MANAGERS_SHEET_NAME=${{ secrets.GOOGLE_STAGE_MANAGERS_SHEET_NAME }}/g" .env
          
          # Copy .env file to deploy directory
          echo "Copying .env file to deploy directory..."
          cp .env deploy/.env
          
          # Create a database backup before deployment (just for safety)
          echo "Creating database backup..."
          if docker-compose --env-file .env -f deploy/docker-compose.prod.yml ps | grep -q db; then
            BACKUP_DIR="/opt/conf-app/backups"
            mkdir -p "$BACKUP_DIR"
            TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
            docker-compose --env-file .env -f deploy/docker-compose.prod.yml exec -T db pg_dump -U "${POSTGRES_USER:-postgres}" "${POSTGRES_DB:-value_db}" > "${BACKUP_DIR}/postgres_backup_${TIMESTAMP}.sql"
            echo "Database backup created at ${BACKUP_DIR}/postgres_backup_${TIMESTAMP}.sql"
          else
            echo "Database container not running, skipping backup"
          fi
          
          # Simple rebuild and restart of all containers
          echo "Rebuilding and restarting all containers..."
          docker-compose --env-file .env -f deploy/docker-compose.prod.yml up -d --build
          
          # Run the SSL fix script to ensure HTTPS is working
          echo "Running SSL fix script..."
          sudo ./deploy/scripts/fix-ssl.sh
          
          # Show status
          echo "Deployment complete. Showing container status:"
          docker-compose --env-file .env -f deploy/docker-compose.prod.yml ps
